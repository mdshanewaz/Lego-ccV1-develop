pipeline {
    agent any
    options { ansiColor('xterm') }
    environment {
        AWS_ACCOUNT_ID          = "700158924566"
        AWS_DEFAULT_REGION      = "us-east-1"

        CCV1_APP_IMAGE_NAME     = "ccv1/dev/webapp"
        CCV1_NGINX_IMAGE_NAME   = "ccv1/dev/webserver"

        ECR_REPO_WEBAPP         = "ccv1/dev/webapp"
        ECR_REPO_WEBSERVER      = "ccv1/dev/webserver"
        ECR_REGISTRY            = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        ECR_REPO_URI_WEBAPP     = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_WEBAPP}"
        ECR_REPO_URI_WESERVER   = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_WEBSERVER}"

        SLACK_CHANNEL           = "#jenkins-build"
        HOSTED_ZONE             = "dataflightit.com" 
        SUB_DOMAIN              = "ccv1dev101"

    }

    stages {


        stage('Checkout git repo') {
            
            steps {
                checkout scm
                
                script {
                    sh "echo reading from jenkinsfile.develop.7001"
                    env.GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()

                }
                script {
                    try {
                        notifyBuild('started')

                        dir("place") {
                            sh 'script name'
                        }
                    } catch (e) {
                        // If there was an exception thrown, the build failed
                        currentBuild.result = "failed"
                        throw e
                    } finally {
                        // Success or failure, always send notifications
                        notifyBuild(currentBuild.result)
                    }            
                }
            }

        }


        stage('check ENV_var') {

            steps {
                script{

                    // prepare application configuratoin
                    sh """
                    CONFIG_PARAMETERS=\$(aws ssm  get-parameters-by-path \
                      --path "/ccv1-dev/" \
                      --query "Parameters[*].Name" \
                      --region us-east-1 \
                      --output text)

                    for config in \$CONFIG_PARAMETERS; do
                        env_value=\$(aws ssm get-parameter \
                            --name "\$config" \
                            --query "Parameter.Value" \
                            --region us-east-1 \
                            --output text)
                        env_name=\${config##/*/}

                       echo "\${env_name}=\${env_value}"
                    done
                    """                    

                }
                script {
                    try {
                        notifyBuild('started')

                        dir("place") {
                            sh 'script name'
                        }
                    } catch (e) {
                        // If there was an exception thrown, the build failed
                        currentBuild.result = "failed"
                        throw e
                    } finally {
                        // Success or failure, always send notifications
                        notifyBuild(currentBuild.result)
                    }            
                }            
            }

        }


        stage('build and publish webapp image') {
                     
            steps {
                script {
                    sh '''
                        set +x
                        $(aws ecr get-login --no-include-email --region us-east-1)
                        set -x
                    '''
                    
                    // To delete volumes currently not being used by a running or stopped container
                    sh "docker system prune --all --force --volumes"

                    // build and publish ccv1_app image
                    sh "docker build -t ${CCV1_APP_IMAGE_NAME}:${GIT_COMMIT} -f infra-v4/dev/docker/Dockerfile.webapp ."
                    sh "docker images"

                    sh "docker tag ${CCV1_APP_IMAGE_NAME}:${GIT_COMMIT} ${ECR_REPO_URI_WEBAPP}:${GIT_COMMIT}"
                    sh "docker push ${ECR_REGISTRY}/${CCV1_APP_IMAGE_NAME}:${GIT_COMMIT}"

                    sh "docker tag ${CCV1_APP_IMAGE_NAME}:${GIT_COMMIT} ${ECR_REPO_URI_WEBAPP}:latest"
                    sh "docker push ${ECR_REGISTRY}/${CCV1_APP_IMAGE_NAME}:latest"

                    // DEBUG
                    sh "docker inspect ${CCV1_APP_IMAGE_NAME}:${GIT_COMMIT}"

                }

                script {
                    try {
                        notifyBuild('started')

                        dir("place") {
                            sh 'script name'
                        }
                    } catch (e) {
                        // If there was an exception thrown, the build failed
                        currentBuild.result = "failed"
                        throw e
                    } finally {
                        // Success or failure, always send notifications
                        notifyBuild(currentBuild.result)
                    }            
                }
            }

            

        }


        stage('build and publish webserver image') {

            steps {
                script {

                    // build and publish ccv1_nginx image
                    sh "docker build -t ${CCV1_NGINX_IMAGE_NAME}:${GIT_COMMIT} -f infra-v4/dev/docker/Dockerfile.webserver ."
                    sh "docker tag ${CCV1_NGINX_IMAGE_NAME}:${GIT_COMMIT} ${ECR_REPO_URI_WESERVER}:${GIT_COMMIT}"
                    sh "docker tag ${CCV1_NGINX_IMAGE_NAME}:${GIT_COMMIT} ${ECR_REPO_URI_WESERVER}:latest"
                    sh "docker push ${ECR_REGISTRY}/${CCV1_NGINX_IMAGE_NAME}:${GIT_COMMIT}"
                    sh "docker push ${ECR_REGISTRY}/${CCV1_NGINX_IMAGE_NAME}:latest"

                    sh "docker inspect ${CCV1_NGINX_IMAGE_NAME}:${GIT_COMMIT}"
                    sh "docker ps -a"
                    sh "docker container ls -a"
                }

                script {
                    try {
                        notifyBuild('started')

                        dir("place") {
                            sh 'script name'
                        }
                    } catch (e) {
                        // If there was an exception thrown, the build failed
                        currentBuild.result = "failed"
                        throw e
                    } finally {
                        // Success or failure, always send notifications
                        notifyBuild(currentBuild.result)
                    }            
                }
            }

                      

        }



        stage('Database Migration') {

            steps {
                script{
                    String username_fname = 'admin'
                    String username_lname = new Date().format("yyyyMMddHHmmss")
                    String dynamicUsername = username_fname + username_lname
                    
                    // prepare application configuratoin
                    sh """
                        set +x
                        DOCKER_EVN_FILE=.env
                        CONFIG_PARAMETERS=\$(aws ssm  get-parameters-by-path \
                          --path "/ccv1-dev/" \
                          --query "Parameters[*].Name" \
                          --region us-east-1 \
                          --output text)

                        for config in \$CONFIG_PARAMETERS; do
                           env_value=\$(aws ssm get-parameter \
                            --name "\$config" \
                            --query "Parameter.Value" \
                            --with-decryption  \
                            --region us-east-1 \
                            --output text)
                            env_name=\${config##/*/}

                           echo "\${env_name}=\${env_value}" >> \${DOCKER_EVN_FILE}
                        done
                        set -x
                    """

                    // -- setup docker-compose
                    sh """curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-\$(uname -s)-\$(uname -m)" -o docker-compose"""
                    sh "chmod +x docker-compose"
                    sh "./docker-compose -f infra-v4/dev/docker-compose-fargate.yml up -d"
                    sh "./docker-compose -f infra-v4/dev/docker-compose-fargate.yml config"

                    // --- starting db migration commands
                    sh "./docker-compose -f infra-v4/dev/docker-compose-fargate.yml exec -T webapp python manage.py showmigrations"
                    sh "./docker-compose -f infra-v4/dev/docker-compose-fargate.yml exec -T webapp python manage.py makemigrations"
                    sh "./docker-compose -f infra-v4/dev/docker-compose-fargate.yml exec -T webapp python manage.py migrate"
                    sh "./docker-compose -f infra-v4/dev/docker-compose-fargate.yml exec -T webapp python manage.py showmigrations"

                    // --- starting loading initial json data to db
                    // sh "./docker-compose -f infra-v4/dev/docker-compose-fargate.yml exec -T webapp python manage.py loaddata_to_db"

                    // --- check for critial issues
                    sh "./docker-compose -f infra-v4/dev/docker-compose-fargate.yml exec -T webapp python manage.py check --deploy"

                    // --- create superuser username=someusername
                    sh "./docker-compose -f infra-v4/dev/docker-compose-fargate.yml exec -T webapp python manage.py create_superuser_command2 --username ${dynamicUsername} --noinput"


                    // --- check docker containers
                    sh "docker ps"                    

                }
                script {
                    try {
                        notifyBuild('started')

                        dir("place") {
                            sh 'script name'
                        }
                    } catch (e) {
                        // If there was an exception thrown, the build failed
                        currentBuild.result = "failed"
                        throw e
                    } finally {
                        // Success or failure, always send notifications
                        notifyBuild(currentBuild.result)
                    }            
                }
            }

            post {
            
                always {
                    //   make sure that the Docker image is removed
                    sh "./docker-compose -f infra-v4/dev/docker-compose-fargate.yml down"
                }
            }
        }


    }

    post {

        success {
            script {
                msg = "ccv1/dev101 >>> Build#${env.BUILD_NUMBER} >>> success"
                slackSend message: msg, color: 'good', channel: "${SLACK_CHANNEL}"
            }
        }

        failure {
            script {
                msg = "ccv1/dev101 >>> Build#${env.BUILD_NUMBER} >>> failed"
                colorCode = '#FF0000'
                slackSend message: msg, color: colorCode, channel: "${SLACK_CHANNEL}"
            }
        }

        always {
            // remote ccv1_app images
            sh "docker rmi -f ${CCV1_APP_IMAGE_NAME}:${GIT_COMMIT} || true"
            sh "docker rmi -f ${ECR_REGISTRY}/${CCV1_APP_IMAGE_NAME}:${GIT_COMMIT} || true"
            sh "docker rmi -f ${ECR_REGISTRY}/${CCV1_APP_IMAGE_NAME}:latest || true"

            // remote ccv1_web images
            sh "docker rmi -f ${CCV1_NGINX_IMAGE_NAME}:${GIT_COMMIT}  || true"
            sh "docker rmi -f ${ECR_REGISTRY}/${CCV1_NGINX_IMAGE_NAME}:${GIT_COMMIT} || true"
            sh "docker rmi -f ${ECR_REGISTRY}/${CCV1_NGINX_IMAGE_NAME}:latest || true"

            deleteDir() /* clean up our workspace */
        }
    }
}




def notifyBuild(String buildStatus = 'started') {
    // build status of null means successful
    buildStatus =  buildStatus ?: 'successful'

    // Default values
    def mySlackChannel = "#jenkins-build"
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def subject = "BUILD_NUMBER#${env.BUILD_NUMBER}: ${buildStatus}"
    def details = "${subject} ${STAGE_NAME}"

    // Override default values based on build status
    if (buildStatus == 'started') {
        color = 'WHITE'
        colorCode = '#FFFFFF'
        slackSend (channel: mySlackChannel, color: colorCode, message: details)
    } else if (buildStatus == 'successful') {
        color = 'WHITE'
        colorCode = '#FFFFFF'
        details = 'successful'
        slackSend (channel: mySlackChannel, color: colorCode, message: details)
    } else {
        color = 'RED'
        colorCode = '#FF0000'
        details = 'failed'
        slackSend (channel: mySlackChannel, color: colorCode, message: details)
    }

}
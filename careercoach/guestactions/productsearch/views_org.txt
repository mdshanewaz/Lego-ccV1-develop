from pprint import pprint
from itertools import chain
from datetime import datetime
from itertools import chain

# from haystack.query import SearchQuerySet 
from ..models import SearchQueryGuest

from django.db.models import Q
from django.conf import settings
from django.contrib import messages
from django.core.exceptions import ObjectDoesNotExist
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render, redirect
from django.template.loader import render_to_string
from django.urls import reverse_lazy
from django.views import View
from django.views.generic import ListView
from django.views.generic.base import TemplateView
from django.views.generic.edit import CreateView

from zzz_lib.zzz_log import zzz_print
from resumeweb.models import mfeedback
from resumeweb.models import mcoupon, mcoupon_given
from resumeweb.models import msendmail

from ..forms import (GlobalSearchForm,)

TEMP_DIR_GENERAL =      'resumeweb/layout/general/'

import logging
logger = logging.getLogger(__name__)



# full text search
# *********************************************
def global_search_view(request):
    template_name = TEMP_DIR_GENERAL+'search-global-v2.html'
    form = GlobalSearchForm
    print(form)
    if 'query_globalsearch' in request.GET:
        form = GlobalSearchForm(request.GET or None)
        print(form)
        if form.is_valid():
            print("form valid starts")
            cd = form.cleaned_data
            logger.warning("cleaned data")
            logger.warning(cd)
            results = SearchQuerySet().all().filter(content = cd['query_globalsearch']).load_all()
            print(results)

            # count total results
            # total_results = results.count()
            context = {
                'form':form,
                'results':results,
                'cd':cd,
                'pg_layout_type': 'all_serv_list'
                # 'total_results': total_results
            }
            return render(request, template_name, context)
        else:
            return  HttpResponse("Hello world from global search form valid")
    else:
        print("i have no idea")
        return HttpResponse("why im going here")









# def global_search(request):
#     form = GlobalSearchForm
#     if 'field_1' in  request.GET:
#         form = GlobalSearchForm(request.GET)
#         if form.is_valid():
#             cd = form.cleaned_data
#             results = SearchQuerySet.models(Search).filter(content = cd['query']).load_all()
            
#             # count total results
#             total_results = results.count()
#     return render(request, 'careercoach/resumeweb/templates/resumeweb/components/forms/global_search.html',{'form':form, 'results':results, 'cd':cd, 'total_results':total_results})







# class GlobalSearchResultsView(ListView):
#     template_name = TEMP_DIR_GENERAL+'search-global-v2.html'
#     paginate_by = 20
#     count = 0
#     # queryset = mprod_exp180.objects.none()

#     def get_context_data(self, *args, **kwargs):
#         context = super().get_context_data(*args, **kwargs)
#         context['count'] = self.count or 0
#         context['query'] = self.request.GET.get('query_globalsearch')
#         print(context['query'])
#         return context


#     # def update_search_query(self):
#     #     query = self.request.GET.get('query_globalsearch', None)
#     #     obj, created = SearchQueryGuest.objects.get_or_create(
#     #         query = query,
#     #         defaults = {'created':datetime.datatime.now()},
            
#     #     )
#     #     obj.save()


#     def get_queryset(self):
#         query = self.request.GET.get('query_globalsearch', None)
#         query_keywords_list = []

#         if query is not None:
#             for i in query.split(" "):
#                 print(query_keywords_list.append(i))


#             if len(query_keywords_list) > 0:
#                 for i in query_keywords_list:
#                     result_exp180 = mprod_exp180.objects.filter(title__icontains=i)
#                     result_intprep = mprod_intprep.objects.filter(title__icontains=i)
#                     result_proglang = mprod_proglang.objects.filter(title__icontains=i)
#                     result_rolebased = mprod_rolebased.objects.filter(title__icontains=i)
#                     result_proflevel = mprod_proflevel.objects.filter(title__icontains=i)
#                     result_visabased = mprod_visabased.objects.filter(title__icontains=i)
#                     result_strategy = mprod_strategy.objects.filter(title__icontains=i)
#                     result_faq = ProductFaq.objects.filter(Q(ques__icontains=i)|Q(ans__icontains=i)) 

#                     # combine querysets
#                     queryset_chain = chain(
#                             result_exp180,
#                             result_intprep,
#                             result_proglang,
#                             result_rolebased,
#                             result_proflevel,
#                             result_visabased,
#                             result_strategy,
#                             result_faq,

#                     )
#                     qs = sorted(queryset_chain,
#                                 key=lambda instance: instance.pk,
#                                 reverse=True)
#                     self.count = len(qs) # since qs is actually a list
#                     print(qs)
#                     return qs
#             else:
#                 resultEmpty = "result is empty"
#             print("query from line96>>>{}".format(query))
#         else:
#             resultEmpty = "result is empty"



# # ============================================================

# # https://testdriven.io/blog/django-search/
# # https://stackoverflow.com/questions/59443512/how-to-store-every-search-term-to-database-in-django

# # next version
# # try to add pickle
# # import pickle
# # qs = mprod_exp180.objects.values_list('id', 'title')


